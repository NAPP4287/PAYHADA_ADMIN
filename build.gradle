plugins {
	id 'org.springframework.boot' version '2.3.0.RELEASE'
	id 'io.spring.dependency-management' version '1.0.9.RELEASE'
	id 'java'
	//id 'war'
	id 'com.palantir.docker' version '0.22.1'
	id "com.moowork.node" version "1.3.1"
}


bootRun {
    String activeProfile = System.properties['spring.profiles.active']
    systemProperty "spring.profiles.active", activeProfile
}

group = 'com.payhada'
version = '2.0.0'
sourceCompatibility = '1.8'

def defaultEncoding = 'UTF8'
compileJava.options.encoding = 'UTF-8'


gradle.startParameter.showStacktrace = org.gradle.api.logging.configuration.ShowStacktrace.ALWAYS

repositories {
	mavenCentral()
}

dependencies {
	// EMBEDDED TOMCAT
	compile group: 'org.apache.tomcat.embed', name: 'tomcat-embed-core', version: '9.0.31'


	// Springboot Config
	compileOnly("org.springframework.boot:spring-boot-devtools")
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-web-services'
	implementation 'org.springframework.boot:spring-boot-starter:2.3.12.RELEASE'

	// aop
	implementation 'org.springframework.boot:spring-boot-starter-aop'

	// Junit
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}

	// Database + jdbc
	implementation "org.springframework.boot:spring-boot-starter-jdbc"
	compile group: 'mysql', name: 'mysql-connector-java', version: '8.0.28'
	implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:2.2.2'

	// Log
	implementation group: 'org.bgee.log4jdbc-log4j2', name: 'log4jdbc-log4j2-jdbc4.1', version: '1.16'
	implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.9.1'
	implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.12.4'

	// Spring Security
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-security:2.3.12.RELEASE'
	testImplementation 'org.springframework.security:spring-security-test'

	// Others
	compile group: 'com.google.code.gson', name: 'gson', version: '2.8.9'
	compile group: 'org.codehaus.groovy', name: 'groovy-all', version: '2.5.14', ext: 'pom'
	implementation 'org.json:json:20220320'

	runtime('net.logstash.logback:logstash-logback-encoder:5.1')

	// httpclient
	implementation group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.13'

	// monitoring
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	compile group: 'io.micrometer', name: 'micrometer-registry-prometheus', version: '1.5.1'

	// excel
	compile group: 'org.apache.poi', name: 'poi', version: '4.1.2'
	compile group: 'com.guicedee.services', name: 'apache-poi-ooxml', version: '1.0.19.9'

	// lombok
	annotationProcessor("org.projectlombok:lombok")
	compileOnly("org.projectlombok:lombok")
	compile group: 'org.projectlombok', name: 'lombok', version: '1.18.4'
	compile group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa', version: '2.3.4.RELEASE'
	annotationProcessor 'org.projectlombok:lombok:1.18.4'

	// https://mvnrepository.com/artifact/commons-codec/commons-codec
	implementation group: 'commons-codec', name: 'commons-codec', version: '1.13'
}

def webappDir = "$projectDir/frontend/admin"


task appNpmInstall(type: NpmTask) {
	workingDir = file("${webappDir}")
	args = ["install"]
}

task appNpmBuild(type: NpmTask) {
	workingDir = file("${webappDir}")
	args = ['run', 'build']
}

task copyWebApp(type: Copy) {
	from 'frontend/admin/build'
	into "build/resources/main/static"
}

appNpmBuild.dependsOn appNpmInstall
copyWebApp.dependsOn appNpmBuild
compileJava.dependsOn copyWebApp


test {
	useJUnitPlatform()
}


/*war { 
	enabled = true  
}*/

ext {
    BUILD_VERSION = new Date().format("yyyyMMddHHmmss")
}

docker {
    name "gaemi/jib-example-case1"
    tags "${project.version}", "${BUILD_VERSION}"
    files tasks.bootJar.outputs.files
    buildArgs(['JAR_FILE': tasks.bootJar.outputs.files.singleFile.name])
}